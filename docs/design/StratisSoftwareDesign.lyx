#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties false
\origin unavailable
\textclass article
\begin_preamble

\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Stratis Software Design: Version 0.4
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This work is licensed under a Creative Commons Attribution-ShareAlike 4.0
 International License.
\end_layout

\end_inset


\end_layout

\begin_layout Author
Andy Grover 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

<agrover@redhat.com>
\end_layout

\end_inset


\end_layout

\begin_layout Date
Last modified: 10/24/2016
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Before saving this file preparatory to a commit, make sure that all insets
 are closed.
 If you are able to read this note, you haven't performed this essential
 step.
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Introduction
\end_layout

\begin_layout Standard
Stratis is a local storage solution that lets multiple logical filesystems
 share a pool of storage that is allocated from one or more block devices.
 This is roughly equivalent to what volume-managing filesystems like ZFS
 and Btrfs do, but differs in implementation.
 Instead of an entirely in-kernel approach, Stratis uses a hybrid user/kernel
 approach that builds upon existing block capabilities like devicemapper,
 existing filesystem capabilities like XFS, and a user space daemon for
 monitoring and control.
\end_layout

\begin_layout Standard
The goal of Stratis is to provide the conceptual simplicity that volume-managing
 filesystems offer, many of their features, but also surpass them in areas
 like monitoring and notification, automatic reconfiguration, and integration
 with higher-level storage management frameworks.
\end_layout

\begin_layout Section*
Asking Questions and Making Changes to this Document
\end_layout

\begin_layout Standard
This document can be found 
\begin_inset CommandInset href
LatexCommand href
name "in the stratis-docs repo"
target "https://github.com/stratis-storage/stratis-docs/blob/master/docs/design/StratisSoftwareDesign.lyx"

\end_inset

, and is written using \SpecialChar LyX
 2.2.1.
 Please ask any questions by opening an issue, and propose changes as pull
 requests.
\end_layout

\begin_layout Section
Conceptual Model
\end_layout

\begin_layout Standard
Stratis’s conceptual model consists of 
\emph on
blockdevs
\emph default
, 
\emph on
pools
\emph default
, and 
\emph on
filesystems
\emph default
.
 A pool is created from one or more blockdevs (block devices), after which
 filesystems may be created from the pool.
 Filesystems are mountable hierarchical collections of files that allocate
 backing storage from the pool on an as-needed basis.
 The key difference between a Stratis filesystem and a conventional Unix
 filesystem is that Stratis filesystem sizes are not managed by the user,
 but by Stratis.
\end_layout

\begin_layout Standard
Since a single system may have multiple pools, each pool has a name, as
 does each filesystem within a pool.
 Each pool has a data redundancy level, which may be none, raid1, raid5,
 raid6, or raid10.
 The default is none.
 The pool’s cache also has a redundancy level that also defaults to none.
 This redundancy level applies to all storage allocated within the pool.
\end_layout

\begin_layout Standard
Stratis supports effectively unlimited blockdevs in a pool, and additional
 blockdevs may be added after the pool is created.
 Blockdevs may also be removed from a pool, if certain preparations are
 performed and conditions are met.
\end_layout

\begin_layout Standard
Stratis supports up to 
\begin_inset Formula $2^{20}$
\end_inset

 filesystems.
 New filesystems may be created from an existing filesystem (i.e.
 a read/write snapshot), or created from scratch.
 After creation, Stratis treats all filesystems identically; a filesystem
 and its snapshot have no dependencies on each other, but simply take up
 less space in the pool due to each initially referencing the same set of
 data blocks.
 However, to aid the user informationally, Stratis tracks and reports snapshot
 parents.
\end_layout

\begin_layout Section
User Experience
\end_layout

\begin_layout Standard
Stratis has a command-line tool that enables the administrator to create
 a Stratis pool from one or more blockdevs, and then allocate filesystems
 from the pool.
\end_layout

\begin_layout Standard
See reference implementation at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/stratis-storage/stratis-cli
\end_layout

\end_inset

 for the most up-to-date status of the CLI design.
\end_layout

\begin_layout Section
D-Bus Programmatic API
\end_layout

\begin_layout Standard
The Stratis service process exposes a D-Bus interface, for other programs
 to integrate support for Stratis.
 This is considered the primary Stratis interface.
 The command-line tool uses the D-Bus API.
\end_layout

\begin_layout Standard
TODO: Create a separate D-Bus API Reference Doc and link to it here.
\end_layout

\begin_layout Subsection
D-Bus Access Control
\end_layout

\begin_layout Subsubsection
Security Policy
\end_layout

\begin_layout Subsubsection
Prevent Spoofing
\end_layout

\begin_layout Section
Scalability and Performance Considerations
\end_layout

\begin_layout Standard
Stratis assumes three usage models:
\end_layout

\begin_layout Enumerate
\begin_inset CommandInset label
LatexCommand label
name "enu:Disk-only"

\end_inset

Disk only
\end_layout

\begin_layout Enumerate
\begin_inset CommandInset label
LatexCommand label
name "enu:Disk-with-SSD"

\end_inset

Disk with SSD caching
\end_layout

\begin_layout Enumerate
\begin_inset CommandInset label
LatexCommand label
name "enu:SSD-only"

\end_inset

SSD only
\end_layout

\begin_layout Standard
The use cases that might do
\begin_inset CommandInset ref
LatexCommand eqref
reference "enu:Disk-only"

\end_inset

 are not terribly concerned with IOPs, but are concerned about resiliency,
 integrity, and ease of management.
 This might include large media files that are accessed mostly sequentially,
 or other
\begin_inset Quotes eld
\end_inset

cold
\begin_inset Quotes erd
\end_inset

 data.
\end_layout

\begin_layout Standard
If random IO performance is needed, adding a caching tier based on SSDs
\begin_inset CommandInset ref
LatexCommand eqref
reference "enu:Disk-with-SSD"

\end_inset

 is going to be better than any optimization of a disk-only solution.
 Stratis therefore doesn’t optimize case
\begin_inset CommandInset ref
LatexCommand eqref
reference "enu:Disk-only"

\end_inset

 for IOPs, but supports setting up faster devices in a caching tier, for
 either read caching or read/write caching (for which users likely want
 redundancy in the cache tier).
\end_layout

\begin_layout Standard
In case
\begin_inset CommandInset ref
LatexCommand eqref
reference "enu:SSD-only"

\end_inset

, the cache tier isn’t needed; the pool should have high IOPs.
 Stratis adds value through resiliency, integrity, ease of use, and ease
 of management.
\end_layout

\begin_layout Section
Software Components
\end_layout

\begin_layout Standard
Stratis consists of a command-line tool,
\emph on
 stratis
\emph default
, and a service,
\emph on
 stratisd
\emph default
.
\end_layout

\begin_layout Standard
stratis implements the command-line interface, and converts commands into
 D-Bus API calls to stratisd.
\end_layout

\begin_layout Standard
stratisd implements the D-Bus interface, and manages and monitors Stratis
 internal pool blockdevs, as described below.
 It is started by (udev? systemd?) and continues to run as long as Stratis
 pools or blockdevs are present in the system.
\end_layout

\begin_layout Section
Internals
\end_layout

\begin_layout Standard
Stratis internals are opaque to the user.
 This allows its implementation maximum flexibility to do whatever it needs
 in Stratis version 1, as well as to be extended in later versions without
 violating any user-visible expectations.
\end_layout

\begin_layout Subsection
Cache Tier Requirements
\end_layout

\begin_layout Standard
Caching may be configured for redundancy, or no redundancy.
\end_layout

\begin_layout Standard
Caching may be configured for write-back and write-through modes.
\end_layout

\begin_layout Standard
Stratis concatenates all cache blockdevs and uses the resulting device to
 cache the thinpool device (L4).
 This lets all filesystems benefit from the cache.
\end_layout

\begin_layout Standard
Cache blocksize should match thinpool datablock size.
\end_layout

\begin_layout Standard
The cache tier can be entirely reconfigured without data loss, once flushed
 and in write-through mode, because it’s just a cache.
 To handle configuration changes, we can just drop the cache and recreate
 it with its new configuration.
\end_layout

\begin_layout Standard
(more details to fill in here.)
\end_layout

\begin_layout Subsection
Cache Tier Metadata
\end_layout

\begin_layout Subsubsection
Cache Tier Metadata Requirements
\end_layout

\begin_layout Enumerate
Identify all blockdevs part of the pool's cache tier, and the configured
 redundancy level
\end_layout

\begin_layout Enumerate
Cache tier supports up to 8 devices.
\end_layout

\begin_layout Enumerate
TBD
\end_layout

\begin_layout Subsection
Data Tier
\end_layout

\begin_layout Subsubsection
Layer 0: blockdevs
\end_layout

\begin_layout Standard
This layer is responsible for discovering existing blockdevs in a pool,
 initializing and labeling new blockdevs unambiguously as part of the pool,
 setting up any disk-specific parameters (TLER?), and storing pool metadata
 on each blockdev.
 Blockdevs may be in the following states: good-unused, good-used, bad,
 spare.
\end_layout

\begin_layout Subsubsection
Layer 1: Integrity (not in version 1)
\end_layout

\begin_layout Standard
Identity-mapped immediately above each blockdev in the pool, Stratis uses
 a to-be-developed DM target that allows the detection of incorrect data
 as it is read, by using extra space to record the results of checksum/hash
 functions on the data blocks, and then compare the results with what the
 blockdev actually returned.
 This will enable Stratis to detect data corruption when the pool is non-redunda
nt, and to repair the corruption when the pool is redundant.
 Such a DM target could use DIF information if present, but would also need
 to work with non-DIF blockdevs.
\end_layout

\begin_layout Subsubsection
Layer 2: Redundancy
\end_layout

\begin_layout Standard
A Stratis pool may optionally be configured to spread data across multiple
 physical disks, so that the loss of any one disk does not cause data loss.
 Stratis uses conventional RAID technology (1, 5, 6, 10) as specified, and
 converts Layer 0 blockdevs into a smaller-sized amount of storage with
 the specified raid properties.
\end_layout

\begin_layout Standard
Since Stratis supports more blockdevs than are RAID-able (generally 8 or
 fewer is best for a raidset IIRC), and differently-sized blockdevs, a redundant
 Stratis pool will likely contain multiple raid sets (all of the same global
 type) Depending on layout, there may be some amount of space in a pool’s
 blockdevs that cannot be used because
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
Is the amount of this free but currently unusable free space part of the
 status of a device?
\end_layout

\begin_layout Plain Layout
probably part of the status of the device and added up into the status of
 the overall pool, I'd think.
\end_layout

\end_inset

it cannot be used in a RAID set.
 Stratis will intensively manage raidsets,
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
What kind of management policy will it follow?
\end_layout

\begin_layout Plain Layout
I can imagine a policy where we'd want min and max size of each raidset,
 both in terms of size and members constituting it, and then Stratis would
 need to reshape existing raids and create new ones as new disks were added,
 or disks removed.
 I think this could end up being quite involved – this is a big part of
 what Stratis is taking on in hiding the hard bits of storage mgmt from
 the user.
 i.e.
 what is the optimal configuration of raids based upon devices available,
 what is current config, and how do we reshape to achieve optimal config?
\end_layout

\begin_layout Plain Layout
How would automatically constructing a new RAID device w/in the pool help
 a user of the pool?
\end_layout

\end_inset

extending them across newly added blockdevs (version 1) or creating new
 raidsets; and handling the removal of blockdevs (version X).
 Stratis may use dm-raid’s reshape capabilities when possible.
\end_layout

\begin_layout Standard
A pool may also be configured with redundancy level of ‘none’.
 In this case, Stratis may opt to
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
Is there a reason why it wouldn't, if more than one device were available?
\end_layout

\begin_layout Plain Layout
it would take work to configure striping, which we may or may not want to
 do for our initial version, is the only reason.
\end_layout

\end_inset

 create a striped blockdev (‘raid0’) across all or some part of the blockdevs,
 if there are more than one.
\end_layout

\begin_layout Standard
Stratis cannot support redundancy with a single disk, but we may wish to
 reserve the small space for raid metadata and other uses even on one-disk
 Stratis pools.
 This will allow the pool to be made redundant (in the version when we support
 this) without encountering some ugly edge cases.
\end_layout

\begin_layout Subsubsection
Layer 3: Flexibility
\end_layout

\begin_layout Standard
Whether blockdevs are part of raidsets or used directly, pools need to cope
 with the addition (version X) or removal (version X+1) of them.
\end_layout

\begin_layout Standard
Version X: Stratis needs to add a blockdev to a pool, and have the space
 available to its filesystems grow accordingly.
 This may involve reshaping one or more raidsets to be wider, or just knowing
 to extend the thinpool onto the blockdev when previous blockdevs are full.
\end_layout

\begin_layout Standard
Version X+1: Stratis needs to be able assign states to each blockdev that
 reflect whether a) it can be removed from the pool with no effect, b) removed
 with loss of redundancy, or c) not removed without data loss.
 It should also be able to move active data off a perhaps-failing disk (or
 refuse, if space on other disks in the pool is not sufficient) so that
 the disk then can be removed from the pool.
 blockdevs may also be marked as ‘spare’, so that they do not contribute
 to the total available space of the pool, but can immediately replace a
 failed disk.
\end_layout

\begin_layout Standard
This layer will support two linear devices made up of segments from L2 devices.
 It will track what L2 devices they are allocated from, allow the two devices
 to grow (and shrink?), and handle the online movement of segments in these
 devices when L2 devices come and go(v2).
\end_layout

\begin_layout Subsubsection
Layer 4: Thin Provisioning
\end_layout

\begin_layout Standard
The two linear targets from L3 are used as metadata device and data device
 for a thin pool.
 Stratis manages the thinpool device by extending the two L3 subdevices
 when either runs low on available blocks.
 If we approach a point where we no longer have empty L2 space to extend
 onto, this is when we would need to start setting off alarm bells, remounting
 read-only, throttling writes, that sort of thing.
\end_layout

\begin_layout Subsubsection
Layer 5: Filesystem
\end_layout

\begin_layout Standard
From the thin pool Stratis can create one or more thin volumes.
 It will automatically give a new volume a default size, and format it with
 a filesystem
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
For the foreseeable future this is always xfs?
\end_layout

\begin_layout Plain Layout
xfs is a "default known good" filesystem.
 It may or may not be the best choice, but we don't have a comparative analysis
 yet that might give us reason to make a different choice.
\end_layout

\end_inset

, and make it available to the user.
 Stratis monitors each filesystem’s fullness vs its capacity and automatically
 extends (using e.g.
 xfs_growfs) them without user intervention.
 Stratis also periodically runs fstrim on each one as well.
\end_layout

\begin_layout Standard
Stratis keeps snapshot origin info in its metadata for user informational
 purposes.
\end_layout

\begin_layout Standard
Encryption layer (in version 3) could conceivably go on top of thin device,
 making it per-fs.
\end_layout

\begin_layout Subsection
Data Tier Metadata
\end_layout

\begin_layout Standard
Stratis must track the blockdevs that make up the data tier of the pool
 (L0), integrity parameters (L1), the raidsets that are created from the
 data blockdevs (L2), the two linear targets that span the L2 devices (L3),
 the thinpool device (L4) and the attributes of the thin devices and filesystems
 created from the thinpool (L5).
\end_layout

\begin_layout Subsubsection
Requirements
\end_layout

\begin_layout Enumerate
Uniquely identify a blockdev as used by Stratis, which pool it is a member
 of, and parameters needed to recreate upper layers 1-5
\end_layout

\begin_layout Enumerate
Detect incomplete or corrupted metadata
\end_layout

\begin_layout Enumerate
Allow for blockdevs being expanded underneath Stratis
\end_layout

\begin_layout Enumerate
Redundant on each blockdev to tolerate e.g.
 accidental dd
\end_layout

\begin_layout Enumerate
Redundant across blockdevs to handle missing, damaged etc.
 members.
 Can provide number & characteristics of missing blockdevs
\end_layout

\begin_layout Enumerate
Handle thousand+ blockdevs in a pool
\end_layout

\begin_layout Enumerate
Handle million+ filesystems in a pool and updates without writing to each
 blockdev (idea: use a system filesystem to store user filesystem info?)
\end_layout

\begin_layout Enumerate
Extensible/upgradeable metadata format
\end_layout

\begin_layout Subsubsection
Design Overview
\end_layout

\begin_layout Standard
Stratis metadata is in three places:
\end_layout

\begin_layout Enumerate
Blockdev Data Area
\end_layout

\begin_deeper
\begin_layout Enumerate
Signature Block
\end_layout

\begin_layout Enumerate
Metadata Area (MDA)
\end_layout

\end_deeper
\begin_layout Enumerate
Thin Device 0
\end_layout

\begin_layout Subsubsection
BlockDev Data Area (BDA)
\end_layout

\begin_layout Standard
The BDA consists of a fixed-length header of eight sectors, which contains
 the Signature Block, followed by the metadata area (MDA), whose length
 is specified in the Signature Block.
\end_layout

\begin_layout Standard
Stratis reserves the first 8 sectors of each blockdev for a static header:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sector offset
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
length (sectors)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
contents
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unused
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signature Block
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unused
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The Signature Block consists of:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="20" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
byte offset
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
length (bytes)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC32 of signature block (bytes at offset 4 length 508)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stratis signature: '!Stra0tis
\backslash
x86
\backslash
xff
\backslash
x02^
\backslash
x41rh'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Device size in 512-byte sectors (u64)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
28
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
flags
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ASCII hex UUID for the Stratis pool
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ASCII hex UUID for the blockdev
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
96
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MDAA UNIX timestamp (seconds since Jan 1 1970) (u64)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
104
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MDAA nanoseconds (u32)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
108
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MDAA used length in bytes (u32)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
112
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MDAA CRC32 over used length
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
116
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unused
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
128
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MDAB UNIX timestamp (seconds since Jan 1 1970) (u64)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
136
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MDAB nanoseconds (u32)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
140
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MDAB used length in bytes (u32)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
144
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MDAB CRC32 over used length
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
148
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unused
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
160
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sector length of blockdev metadata area (MDA) (u32)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
164
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sector length of reserved space (u32)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
168
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
344
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unused
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Itemize
All 'flags' or 'unused' fields are zeroed.
\end_layout

\begin_layout Itemize
Blockdev metadata area (offset 160) must be an even number of at least 2040
 – combined minimum length of overall BDA (static header and MDA) is 2048
 sectors (1 MiB).
\end_layout

\begin_layout Itemize
The BDA is written to the beginning and end of the blockdev.
\end_layout

\begin_layout Itemize
The BDA at the start of the blockdev is followed immediately by 
\emph on
reserved space
\emph default
, whose size is specified in the signature block (offset 164).
\end_layout

\begin_layout Itemize
The MDA is evenly divided into two areas: MDAA and MDAB.
\end_layout

\begin_layout Itemize
Data within the metadata areas is stored in JSON format.
\end_layout

\begin_layout Itemize
Metadata updates write to the older of the MDAA and MDAB areas.
 This is determined by lowest timestamp, and then lowest nanoseconds if
 timestamps are equal.
\end_layout

\begin_layout Itemize
The procedure for updating metadata is:
\end_layout

\begin_deeper
\begin_layout Enumerate
The JSON metadata is written to either MDAA or MDAB in the start-of-blockdev
 BDA, as determined above.
\end_layout

\begin_layout Enumerate
The chosen MDA's timestamp, nanosecond, length, and CRC fields in the signature
 block are updated: timestamp gets the UNIX timestamp.
 Nanoseconds is the current nanoseconds within the second.
 Length is set to the length of the metadata, and the CRC32 is calculated
 on the data up to that length.
\end_layout

\begin_layout Enumerate
The signature block's CRC32 is calculated.
\end_layout

\begin_layout Enumerate
The signature block is written and flushed to disk.
 The implementation may choose to write the entire 8 sectors of the static
 header.
\end_layout

\end_deeper
\begin_layout Itemize
The identical MDAx and signature block is then written to the end-of-blockdev
 BDA, followed by a flush/FUA.
\end_layout

\begin_layout Subsubsection
Metadata Area (MDA)
\end_layout

\begin_layout Standard
The MDA contains a JSON structure that represents the pool's overall configurati
on of blockdevs, from L0 to L4.
\end_layout

\begin_layout Subsubsection
Thin Device 0
\end_layout

\begin_layout Standard
Thin device 0 is an XFS-formatted thin device that is used by Stratis to
 store information on user-created filesystems.
 These are stored in the filesystem in TBD format.
\end_layout

\begin_layout Subsubsection
The MDA and Very Large Pools
\end_layout

\begin_layout Standard
Very large Stratis pools will encounter two issues.
 First, updating the metadata on all blockdevs in the pool may become a
 performance bottleneck.
 Second, the default MDA size may become inadequate to contain the information
 required.
\end_layout

\begin_layout Standard
To solve the first issue, Stratis caps the number of blockdevs that receive
 updated metadata information.
 A reasonable value for this cap might be in the range of 6 to 10, and should
 try to spread metadata updates across path-independent blockdevs, if this
 can be discerned, or randomly.
 This limits excessive I/O when blockdevs are added or removed from the
 pool, but maximizes the likelihood that up-to-date pool metadata is retrievable
 in case of failure.
\end_layout

\begin_layout Standard
To solve the second issue, Stratis monitors how large its most recent serialized
 metadata updates are, and increases the size of MDA areas on newly added
 devices when a fairly low threshold – %50 – is reached in comparison to
 the available MDAx size.
 This ensures that by the time sufficient blockdevs have been added to the
 pool to be in danger of serialized JSON data being too large, there are
 enough blockdevs with enlarged MDA space so that they can be used for MDA
 writes.
\end_layout

\begin_layout Section
Delivery of Features
\end_layout

\begin_layout Subsection
Stratis version 0.1
\end_layout

\begin_layout Standard
Simplest thing that does something useful
\end_layout

\begin_layout Enumerate
Create a pool
\end_layout

\begin_layout Enumerate
Destroy a pool
\end_layout

\begin_layout Enumerate
Create a filesystem
\end_layout

\begin_layout Enumerate
Create a filesystem from existing filesystem (a r/w snapshot)
\end_layout

\begin_layout Enumerate
Destroy a filesystem
\end_layout

\begin_layout Enumerate
List filesystems
\end_layout

\begin_layout Enumerate
Rename filesystems
\end_layout

\begin_layout Enumerate
List pools
\end_layout

\begin_layout Enumerate
Rename pools
\end_layout

\begin_layout Enumerate
List blockdevs in a pool
\end_layout

\begin_layout Enumerate
Redundancy level: none
\end_layout

\begin_layout Enumerate
D-Bus API
\end_layout

\begin_layout Enumerate
Command-line tool
\end_layout

\begin_layout Enumerate
Save/restore configuration across reboot
\end_layout

\begin_layout Enumerate
Initial disk labeling and on-disk metadata format
\end_layout

\begin_layout Enumerate
Error handling for missing, corrupted, or duplicate blockdevs in a pool
\end_layout

\begin_layout Subsection
Stratis version 0.5
\end_layout

\begin_layout Standard
Add cache tier
\end_layout

\begin_layout Enumerate
List cache blockdevs in a pool
\end_layout

\begin_layout Enumerate
Add cache blockdevs
\end_layout

\begin_layout Enumerate
Remove cache blockdevs
\end_layout

\begin_layout Enumerate
Write-through caching only
\end_layout

\begin_layout Subsection
Stratis version 1.0
\end_layout

\begin_layout Standard
Minimum Viable Product
\end_layout

\begin_layout Enumerate
Snapshot management: auto snaps, date-based culling, “promotion” from snap
 to “primary”
\end_layout

\begin_layout Enumerate
Monitor pool(s) for getting close to capacity, and do something (remount
 ro?) if dangerously full
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
I wonder how this can be handled good, available space starvation is bad,
 and it should be signaled on several channels if this limit is approached.
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Some sort of notification method to the user if pool is approaching capacity
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
Health stats and user defined threshold settings are something that should
 be in a first release - add some unique value.
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Maintain filesystems: Grow a filesystem as it nears capacity
\end_layout

\begin_layout Enumerate
Maintain filesystems: Run fstrim periodically to release unused areas back
 to thinpool
\end_layout

\begin_layout Enumerate
Add and use an additional blockdev
\end_layout

\begin_layout Subsection
Stratis version 2.0
\end_layout

\begin_layout Standard
Add Redundancy Support
\end_layout

\begin_layout Enumerate
Remove an existing blockdev
\end_layout

\begin_layout Enumerate
Redundancy level: raid1
\end_layout

\begin_layout Enumerate
Redundancy level: raid5
\end_layout

\begin_layout Enumerate
Redundancy level: raid6
\end_layout

\begin_layout Enumerate
Redundancy level: raid10
\end_layout

\begin_layout Enumerate
Cache redundancy level: raid1
\end_layout

\begin_layout Enumerate
Write-through caching enabled
\end_layout

\begin_layout Enumerate
thin/cache metadata validation/check (i.e.
 call thin_check & cache_check)
\end_layout

\begin_layout Enumerate
Quotas
\end_layout

\begin_layout Enumerate
Blockdev resize (larger)
\end_layout

\begin_layout Enumerate
Spares
\end_layout

\begin_layout Subsection
Stratis version 3.0
\end_layout

\begin_layout Standard
Rough ZFS feature parity.
 New DM features needed.
\end_layout

\begin_layout Enumerate
Send/Receive Integrity checking (w/ self-healing only if on raid)
\end_layout

\begin_layout Enumerate
Raid scrub
\end_layout

\begin_layout Enumerate
Compression
\end_layout

\begin_layout Enumerate
Encryption
\end_layout

\begin_layout Enumerate
Dedupe[aq]
\end_layout

\begin_layout Enumerate
Raid write log (on ssd? To eliminate raid write hole)
\end_layout

\begin_layout Subsection
Stratis version 4.0
\end_layout

\begin_layout Standard
Future features and evolution
\end_layout

\begin_layout Enumerate
Change a pool’s redundancy level
\end_layout

\begin_layout Enumerate
Boot from a filesystem
\end_layout

\begin_layout Enumerate
Libstoragemgmt integration
\end_layout

\begin_layout Enumerate
Multipath integration
\end_layout

\begin_layout Enumerate
Tag-based blockdev and filesystem classification/grouping
\end_layout

\begin_layout Enumerate
Mirroring across partitions within a pool, for multi-site or across hw failure
 domains (shelves/racks)
\end_layout

\begin_layout Section
Open Questions
\end_layout

\begin_layout Paragraph
Initial filesystem sizing.
\end_layout

\begin_layout Standard
Mkfs does different things depending on the size of the blockdev.
 If it’s small then things will be suboptimal if we grow it substantially.
 Weigh this against too large, which would waste thinpool space (mkfs touches/al
locates more thin blocks).
\end_layout

\begin_layout Paragraph
Alignment and tuning of sizes across layers.
\end_layout

\begin_layout Standard
It would be great if the fs happens to write to a new location that allocates
 a thin block that it uses that entire block.
 Also, look at XFS allocation groups, they may work cross-purposes to thinpool
 by spreading files across the blkdev.
 Align as much as possible.
\end_layout

\begin_layout Paragraph
Behavior when thin pool is exhausted.
\end_layout

\begin_layout Standard
Slow down? Switch all fs to read-only?
\end_layout

\begin_layout Paragraph
Should we separate cache into read devs and write devs?
\end_layout

\begin_layout Standard
Write-back cache we may want to support redundancy (cache contains only
 copy of data until flush) whereas read cache redundancy serves little purpose,
 just reduces the total space available.
\end_layout

\begin_layout Paragraph
Snapshot semantics & management.
\end_layout

\begin_layout Standard
Snapshots should be thought of as “secondary” and read-only until promoted
 to “primary” and read-write
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See GitHub issue:
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/stratis-storage/stratisd/issues/19
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Paragraph
Quotas.
\end_layout

\begin_layout Standard
If the default behavior is to grow a vol that nears its notional capacity,
 how do we limit it for vols (e.g.
 /var/log or time machine) where being limited in size is part of how they
 expect to operate?
\end_layout

\begin_layout Paragraph
Should we have a ‘monitor’ subcommand?
\end_layout

\begin_layout Standard
What would it do?
\end_layout

\begin_layout Paragraph
Being able to identify and differentiate blockdevs within a pool is very
 important, given how many there can be.
\end_layout

\begin_layout Standard
We should provide the user with system-generated info, and also allow the
 user to add their own descriptions of blockdevs.
\end_layout

\begin_layout Paragraph
Journald interactions
\end_layout

\begin_layout Paragraph
Nfs interactions
\end_layout

\end_body
\end_document
