#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties false
\origin unavailable
\textclass article
\begin_preamble

\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Stratis Software Design: Version 0.7.1
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This work is licensed under a Creative Commons Attribution-ShareAlike 4.0
 International License.
\end_layout

\end_inset


\end_layout

\begin_layout Author
Andy Grover 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

<agrover@redhat.com>
\end_layout

\end_inset


\end_layout

\begin_layout Date
Last modified: 12/2/2016
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Before saving this file preparatory to a commit, make sure that all insets
 are closed.
 If you are able to read this note, you haven't performed this essential
 step.
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Asking Questions and Making Changes to this Document
\end_layout

\begin_layout Standard
This document can be found 
\begin_inset CommandInset href
LatexCommand href
name "in the stratis-docs repo"
target "https://github.com/stratis-storage/stratis-docs/blob/master/docs/design/StratisSoftwareDesign.lyx"

\end_inset

, and is written using \SpecialChar LyX
 2.2.2.
 Please ask any questions by opening an issue, and propose changes as pull
 requests.
\end_layout

\begin_layout Part
Background
\end_layout

\begin_layout Section
Problem Statement
\end_layout

\begin_layout Standard
Linux has gained many storage-related features over the years, but each
 of these features has required the user to manage the configuration of
 these features in a layered, additive manner.
 Genuinely new and useful features such as thin provisioning, RAID, and
 multipath are dependent on the user correctly configuring many different
 tools to achieve a complete result.
 Furthermore, since storage administration tools are focused on the command-line
, higher-level management tools must each individually build upon the inherently
 risky proposition of treating the human-focused syntax and output of CLI
 tools as a stable programmatic API.
 This is an unending source of pain.
\end_layout

\begin_layout Standard
In the past ten years, 
\emph on
volume-managing filesystems
\emph default
 (VMFs) such as ZFS and Btrfs have come into vogue, and gained users.
 These incorporate what would be handled by multiple tools under traditional
 Linux into a single tool.
 Redundancy, thin provisioning, volume management, and filesystems become
 features within a single comprehensive, consistent configuration system.
 However, ZFS isn't an option Linux can fully embrace due to licensing (although
 the demand for ZFS apparently was sufficient to convince Ubuntu to ship
 it even so).
 And while Btrfs has no licensing issues, after many years of work it still
 has significant technical issues that may never be resolved.
\end_layout

\begin_layout Standard
VMFs do much to simplify storage on Linux, but existing ones are unsuitable,
 and writing a new one from scratch is not feasible.
 Stratis's goal is to satisfy VMF-like requirements by managing existing
 layers on behalf of the user, so that users can start using an integrated,
 automated storage solution now, which can over time add capabilities as
 the underlying technologies grow more capable.
\end_layout

\begin_layout Subsection
Goal: Deliver a VMF solution for RHEL
\end_layout

\begin_layout Standard
This is functionality that RHEL users are asking for.
 Given we're not able to use existing solutions, we need to create one.
 But, we should not just copy ZFS.
 ZFS is now over a decade old and the storage landscape has changed since
 its design.
 We seek to satisfy the same needs that ZFS does, but also integrate more
 tightly into today's increasingly automated storage management solutions,
 that span the data center as well as the local machine.
\end_layout

\begin_layout Subsection
Requirements
\end_layout

\begin_layout Enumerate
Simple and comprehensive command-line interface
\end_layout

\begin_layout Enumerate
Programmatic language-neutral API for higher-level management tool integration
\end_layout

\begin_layout Enumerate
Event-driven monitoring and alerts
\end_layout

\begin_layout Enumerate
Eliminate manual resizing of filesystems
\end_layout

\begin_layout Enumerate
Make technology like thin-provisioning, snapshots, integrity, redundancy,
 and a cache tier easy to use
\end_layout

\begin_layout Enumerate
Bootable
\end_layout

\begin_layout Enumerate
Implementable in 1-2 years
\end_layout

\begin_layout Section
Adapting existing solutions
\end_layout

\begin_layout Standard
As part of early requirements-gathering, the team looked at existing projects
 in this space, both as candidates for building upon to create a solution,
 as well as if an existing project could be extended to meet the requirements.
\end_layout

\begin_layout Subsection
Extending an existing project
\end_layout

\begin_layout Subsubsection
SSM
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "SSM"
target "https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Storage_Administration_Guide/ch-ssm.html"

\end_inset

 provides a command line interface to manage storage in existing technologies.
 Our interest in SSM was to determine if it would be an existing project
 we could extend to meet our requirements.
\end_layout

\begin_layout Standard
SSM provides a unified interface for three different “backends”: LVM, Btrfs,
 and crypto.
 However, if we wish to provide a simple, unified experience, the first
 step would likely be to pick one of the backends and build around its capabilit
ies.
 This eliminates complexity from the CLI -- no need for the user to pick
 a backend or encounter commands that happen to not work based upon the
 chosen backend, but obviates much of the point of SSM.
\end_layout

\begin_layout Standard
SSM does not provide a programmatic API.
 It internally contains “ssmlib”, which could be enhanced and exposed, but
 would be Python-only.
 ssmlib is also built around executing command-line tools, which can cause
 issues.
\end_layout

\begin_layout Standard
SSM is not a daemon.
 We’d need to modify SSM to operate on a daemon model.
 An ongoing presence is needed for fault monitoring but also automatic filesyste
m and thinpool extensions.
\end_layout

\begin_layout Standard
SSM doesn’t currently support RAID5/6, thin provisioning, or configuring
 a cache tier.
\end_layout

\begin_layout Standard
SSM is written in Python, which would limit its ability to be used in an
 early-boot environment.
\end_layout

\begin_layout Standard
SSM does not provide functionality for error recovery.
 If the storage stack encounters an error the user has to use the individual
 tools in the stack to correct.
 Thus greatly diminishing the ease of use aspect and value proposition of
 SSM.
\end_layout

\begin_layout Subsubsection*
Analysis
\end_layout

\begin_layout Standard
Basing our development on SSM is not desirable.
\end_layout

\begin_layout Subsubsection
LVM2
\begin_inset CommandInset label
LatexCommand label
name "subsec:LVM2"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "LVM2"
target "https://en.wikipedia.org/wiki/Logical_Volume_Manager_(Linux)"

\end_inset

 is the nearly universally-used volume manager on Linux.
 It provides the 
\begin_inset Quotes eld
\end_inset

policy
\begin_inset Quotes erd
\end_inset

 that controls devicemapper.
 It adds:
\end_layout

\begin_layout Itemize
On-disk metadata format to save and restore configuration across boot
\end_layout

\begin_layout Itemize
Usage model built on Physical Volume, Volume Group, and Logical Volume (PV,
 VG, LV) concepts.
\end_layout

\begin_layout Itemize
A comprehensive set of command line tools for configuring linear, raid,
 thinpool, cache, and other devicemapper capabilities
\end_layout

\begin_layout Itemize
Monitoring, error handling, and recovery
\end_layout

\begin_layout Itemize
LV resize; PVs may be added or removed from a VG
\end_layout

\begin_layout Itemize
Snapshots and thin snapshots
\end_layout

\begin_layout Itemize
Choice of user-guided or automatic allocation/layout within the VG
\end_layout

\begin_layout Subsubsection*
Analysis
\end_layout

\begin_layout Standard
Mentioned here only for completeness.
 There are a number of fundamental design choices in LVM2 that would make
 this very hard.
 Add in the risk in changing direction of a mission-critical tool, the difficult
y of changing a large codebase while maintaining backwards compatibility,
 and the answer must be no.
\end_layout

\begin_layout Subsection
Building upon existing projects
\end_layout

\begin_layout Subsubsection
XFS
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "XFS"
target "https://en.wikipedia.org/wiki/XFS"

\end_inset

 is a highly respected non-volume-managing filesystem.
 To meet the goal of eliminating manual filesystem resizing by the user,
 Stratis requires the filesystem used have online resize (or at least online
 grow) capabilities, which XFS does.
 Use of XFS on top of thin provisioning also makes proper initial sizing
 important, as well as choosing sizes for XFS on-disk allocations that match
 those used by the underlying thin-provisioning layer, to ensure behavior
 with the two layers is optimal.
\end_layout

\begin_layout Subsubsection*
Analysis
\end_layout

\begin_layout Standard
XFS meets the requirements and currently seems like the best choice.
\end_layout

\begin_layout Subsubsection
Devicemapper
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Devicemapper"
target "https://en.wikipedia.org/wiki/Device_mapper"

\end_inset

 is a framework provided by the Linux kernel for mapping physical block
 devices onto higher-level virtual block devices.
 Its mapping targets include support for RAID, thin provisioning, encryption,
 multipath devices, caching devices, and more.
 It provides the ability to configure these capabilities, but no facilities
 for saving or restoring a configuration.
 Devicemapper provides 
\begin_inset CommandInset href
LatexCommand href
name "mechanism, but no policy"
target "http://www.personal.kent.edu/~rmuhamma/OpSystems/Myos/mechanicPolicy.htm"

\end_inset

.
\end_layout

\begin_layout Subsubsection*
Analysis
\end_layout

\begin_layout Standard
Using devicmapper directly would require that an upper layer implement its
 own on-disk metadata format and handle some tasks in a similar manner to
 LVM2.
\end_layout

\begin_layout Subsubsection
LVM2
\end_layout

\begin_layout Standard
See 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:LVM2"

\end_inset

 for a description of LVM2 capabilities.
\end_layout

\begin_layout Subsubsection*
Analysis: Summary
\end_layout

\begin_layout Standard
LVM is a volume manager.
 But it is not a 
\begin_inset Quotes eld
\end_inset

volume manager meta-framework
\begin_inset Quotes erd
\end_inset

 – a tool for writing other volume managers.
 All the issues below stem from asking LVM to be and do something it was
 not originally designed to do.
\end_layout

\begin_layout Subsubsection*
Analysis: Details
\end_layout

\begin_layout Itemize
Policy+mechanism vs policy+policy+mechanism: LVM2 is configurable but has
 limitations.
 e.g.
 we might wish to let the user define a block device as only to be used
 to replace a failed disk in a raidset.
 However LVM raid_fault_policy=
\begin_inset Quotes erd
\end_inset

allocate
\begin_inset Quotes erd
\end_inset

 will use 
\emph on
any
\emph default
 free PV, not just one explicitly reserved.
 Other issues like this are undoubtedly present.
\end_layout

\begin_layout Itemize
Some other ramifications of LVM2 not being designed to be a used this way:
\end_layout

\begin_deeper
\begin_layout Itemize
LVM2 locking is fine-grained, flock(2)-based, and assumes no centralized
 daemon
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The default locking type.
 LVM actually has 5 locking methods but this isn't relevant to the point
 being made
\end_layout

\end_inset

.
 Since Stratis's design incorporates a daemon that would allow easier mutual
 exclusion, this would be an opportunity lost to simplify this area.
\end_layout

\begin_layout Itemize
A good API needs the ability to convey meaningful and consistent errors
 for other applications to interpret.
 The lvm command line employs a simple exit code strategy.
 The error reason is embedded in stderr in free form text that changes without
 notice.
 Thus it is virtually impossible for any lvm command line wrapper to provide
 meaningful and consistent error codes other than success or failure.
 Note: Lvm has recently added JSON output which contains the ability to
 add more meaningful and useful error codes, but this functionality is not
 implemented and non-trivial in scope to complete.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Under the covers
\begin_inset Quotes erd
\end_inset

 usage not so under the covers: Stratis-managed LVM2 devices would show
 up in LVM2 device & volume listings, which would cause user confusion
\end_layout

\end_deeper
\begin_layout Itemize
Using LVM2 for metadata tracking is good, but only if upper layer has no
 metadata storage needs of its own.
 No mechanism to store additional metadata.
\end_layout

\begin_layout Itemize
LVM2 metadata format prevents new metadata schemes, such as tracking thin
 volumes separately from PV metadata
\end_layout

\begin_layout Itemize
Use of new devicemapper features delayed by LVM2 implementation and release
 cycle.
\end_layout

\begin_layout Itemize
Unclear whether LVM2 or Stratis would react to resolve DM events.
 Unclear if the needed info to monitor thin-allocated filesystems could
 be obtained through LVM2, or if Stratis would still need to talk to Devicemappe
r.
\end_layout

\begin_layout Itemize
Uncertainty over long process time adding new feature or enabling tweaks
 Stratis needs to LVM2, given large codebase, need for stability, and other
 competing priorities
\end_layout

\begin_layout Subsection
Conclusions
\end_layout

\begin_layout Standard
Based on looking at the existing available building blocks, the best option
 is to build Stratis as a new project, that makes use of XFS and Devicemapper
 in its implementation.
 This will require that it implement its own on-disk metadata format and
 handle some tasks that overlap with LVM2, but this will avoid Stratis being
 constrained by LVM's concepts, and what would otherwise be a requirement
 to drive devicemapper entirely through LVM, instead of directly.
\end_layout

\begin_layout Part
Solution Overview
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Stratis is a local storage solution that lets multiple logical filesystems
 share a pool of storage that is allocated from one or more block devices.
 This is roughly equivalent to what volume-managing filesystems like ZFS
 and Btrfs do, but differs in implementation.
 Instead of an entirely in-kernel approach, Stratis uses a hybrid user/kernel
 approach that builds upon existing block capabilities like devicemapper,
 existing filesystem capabilities like XFS, and a user space daemon for
 monitoring and control.
\end_layout

\begin_layout Standard
The goal of Stratis is to provide the conceptual simplicity that volume-managing
 filesystems offer as well as many of their features, but also surpass them
 in areas like monitoring and notification, automatic reconfiguration, and
 integration with higher-level storage management frameworks.
\end_layout

\begin_layout Subsection
Known shortcomings
\end_layout

\begin_layout Standard
Stratis' goal is to hide the complexity of its implementation from the user,
 but by using a reuse/layering approach to its implementation, there will
 be places where Stratis' implementation details will peek through.
 This could cause user confusion, and also could threaten Stratis integrity
 if the user makes changes.
\end_layout

\begin_layout Itemize
For Stratis filesystems, 'df' will report the current used and free sizes
 as seen and reported by XFS.
 This is not useful information, because the filesystem's actual storage
 usage will be less due to thin provisioning, and also because Stratis will
 automatically grow the filesystem if it nears XFS's currently sized capacity.
\end_layout

\begin_layout Itemize
Users should not try to reformat or reconfigure XFS filesystems that are
 managed by Stratis.
 Stratis has no way to enforce this or warn the user to avoid this, other
 than in the documentation.
\end_layout

\begin_layout Itemize
Stratis will use many Devicemapper devices, which will show up in `dmsetup`
 listings and /proc/partitions.
 Similarly, `lsblk`output on a Stratis system will reflect Stratis' internal
 workings and layers, which ideally would be hidden from the user.
\end_layout

\begin_layout Itemize
Stratis requires a userspace daemon, which must remain running at all times
 for proper monitoring and pool maintenenance.
\end_layout

\begin_layout Section
Stratis and the Linux storage stack
\end_layout

\begin_layout Standard
Stratis simplifies many aspects of local storage provisioning and configuration.
 This, along with its API, would let projects dependent on configuring local
 storage do so much more easily.
\end_layout

\begin_layout Standard
For example, installing the OS to a Stratis pool using Anaconda.
 After selecting the disks to use for the pool, the first benefit would
 be the complex flow around sizing of filesystems could be omitted.
 Second, since Stratis has an API, Anaconda could use it directly, instead
 of needing work in Blivet to build an API on top of command line tools.
\end_layout

\begin_layout Standard
Other management tools like Cockpit, virtualization products like RHEV,
 or container products like Atomic would find it much simpler and less error-pro
ne to use storage and snapshots with Stratis, for the same two reasons:
 don't need to worry about per-filesystem sizing (only that the pool has
 enough 
\begin_inset Quotes eld
\end_inset

backing store
\begin_inset Quotes erd
\end_inset

); and the API, which allows better tool-to-tool integration than using
 CLI programmatically.
\end_layout

\begin_layout Section
Conceptual Model
\end_layout

\begin_layout Standard
Stratis’s conceptual model consists of 
\emph on
blockdevs
\emph default
, 
\emph on
pools
\emph default
, and 
\emph on
filesystems
\emph default
.
 A pool is created from one or more blockdevs (block devices), after which
 filesystems may be created from the pool.
 Filesystems are mountable hierarchical collections of files that allocate
 backing storage from the pool on an as-needed basis.
 The key difference between a Stratis filesystem and a conventional Unix
 filesystem is that Stratis filesystem sizes are not managed by the user,
 but by Stratis.
\end_layout

\begin_layout Standard
Since a single system may have multiple pools, each pool has a name, as
 does each filesystem within a pool.
 Each pool has a data redundancy level, which may be none, raid1, raid5,
 raid6, or raid10.
 The default is none.
 The pool’s cache also has a redundancy level that also defaults to none.
 This redundancy level applies to all storage allocated within the pool.
\end_layout

\begin_layout Standard
Stratis supports effectively unlimited blockdevs in a pool, and additional
 blockdevs may be added after the pool is created.
 Blockdevs may also be removed from a pool, if certain preparations are
 performed and conditions are met.
\end_layout

\begin_layout Standard
Stratis supports up to 
\begin_inset Formula $2^{24}$
\end_inset

 filesystems
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Theoretical maximum.
 We would support a smaller number for this and other values (max blockdevs,
 max filesystem size) based upon what we had actually been able to test.
\end_layout

\end_inset

.
 New filesystems may be created from an existing filesystem (i.e.
 a read/write snapshot), or created from scratch.
 After creation, Stratis treats all filesystems identically; a filesystem
 and its snapshot have no dependencies on each other, but simply take up
 less space in the pool due to each initially referencing the same set of
 data blocks.
 However, to aid the user informationally, Stratis tracks and reports snapshot
 ancestors.
\end_layout

\begin_layout Section
Scalability and Performance Considerations
\end_layout

\begin_layout Standard
Stratis doesn't optimize performance within its data tier.
 The justification is that adding an SSD caching tier, or even moving to
 all-SSD storage, is likely to be a better solution if performance is a
 consideration.
 Stratis therefore focuses only on resiliency, integrity, and ease of management
 in the data tier.
\end_layout

\begin_layout Part
Implementation
\end_layout

\begin_layout Section
Software Components
\end_layout

\begin_layout Standard
Stratis consists of a command-line tool,
\emph on
 stratis
\emph default
, and a service,
\emph on
 stratisd
\emph default
.
\end_layout

\begin_layout Standard
stratis implements the command-line interface, and converts commands into
 D-Bus API calls to stratisd.
\end_layout

\begin_layout Standard
stratisd implements the D-Bus interface, and manages and monitors Stratis
 internal pool blockdevs, as described below.
 It is started by the system and continues to run as long as Stratis pools
 or blockdevs are present in the system.
\end_layout

\begin_layout Section
User Experience
\end_layout

\begin_layout Standard
Stratis has a command-line tool that enables the administrator to create
 a Stratis pool from one or more blockdevs, and then allocate filesystems
 from the pool.
\end_layout

\begin_layout Standard
See reference implementation at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/stratis-storage/stratis-cli
\end_layout

\end_inset

 for the most up-to-date status of the CLI design.
\end_layout

\begin_layout Standard
This component is not required to be installed, in cases such as an appliance
 where a higher-level application such as Cockput or Ansible uses the D-Bus
 API directly.
\end_layout

\begin_layout Section
D-Bus Programmatic API
\end_layout

\begin_layout Standard
The Stratis service process exposes a D-Bus interface, for other programs
 to integrate support for Stratis.
 This is considered the primary Stratis interface.
 The command-line tool uses the D-Bus API.
\end_layout

\begin_layout Standard
TODO: Create a separate D-Bus API Reference Doc and link to it here.
\end_layout

\begin_layout Subsection
D-Bus Access Control
\end_layout

\begin_layout Subsubsection
Security Policy
\end_layout

\begin_layout Subsubsection
Prevent Spoofing
\end_layout

\begin_layout Section
Internals
\end_layout

\begin_layout Standard
Stratis internals aim to be opaque to the user.
 This allows its implementation maximum flexibility to do whatever it needs
 in Stratis version 1, as well as to be extended in later versions without
 violating any user-visible expectations.
\end_layout

\begin_layout Subsection
Cache Tier Requirements
\end_layout

\begin_layout Enumerate
Caching may be configured for redundancy, or no redundancy.
\end_layout

\begin_layout Enumerate
Caching may be configured for write-back and write-through modes.
\end_layout

\begin_layout Enumerate
Stratis concatenates all cache blockdevs and uses the resulting device to
 cache the thinpool device (L4).
 This lets all filesystems benefit from the cache.
\end_layout

\begin_layout Enumerate
Cache blocksize should match thinpool datablock size.
\end_layout

\begin_layout Enumerate
The cache tier can be entirely reconfigured without data loss, once flushed
 and in write-through mode, because it’s just a cache.
 To handle configuration changes, we can just drop the cache and recreate
 it with its new configuration.
\end_layout

\begin_layout Enumerate
(more details to fill in here.)
\end_layout

\begin_layout Subsection
Cache Tier Metadata
\end_layout

\begin_layout Subsubsection
Cache Tier Metadata Requirements
\end_layout

\begin_layout Enumerate
Identify all blockdevs part of the pool's cache tier, the configured redundancy
 level, and other cache-specific configuration parameters (e.g.
 WT/WB, block size, cache policy)
\end_layout

\begin_layout Enumerate
Cache tier supports up to 8 devices.
\end_layout

\begin_layout Subsection
Data Tier Requirements
\end_layout

\begin_layout Standard
The data tier of Stratis must manage blockdevs on behalf of the user to
 provide the following:
\end_layout

\begin_layout Enumerate
Managed filesystems that consume only as much space as the files they contain
\end_layout

\begin_layout Enumerate
Fast snapshots of existing filesystems
\end_layout

\begin_layout Enumerate
The ability to add (and eventually remove) individual blockdevs to grow
 the available space available to filesystems
\end_layout

\begin_layout Enumerate
User-selectable redundancy level (per-pool granularity)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
in a future version
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Integrity checking
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
in a future version
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Data Tier
\end_layout

\begin_layout Standard
The data tier achieves these requirements by layering Devicemapper (DM)
 devices on top of the pool's blockdevs, culminating in a thin devices allocated
 from a thinpool.
 Stratis initializes these thin devices with a filesystem, and manages the
 DM devices and filesystems to meet the above requirements.
\end_layout

\begin_layout Subsubsection
Layer 0: Blockdevs
\end_layout

\begin_layout Standard
This layer is responsible for discovering existing blockdevs in a pool,
 initializing and labeling new blockdevs unambiguously as part of the pool,
 setting up any disk-specific parameters, and storing pool metadata on each
 blockdev.
 Blockdevs may be in the following states: good-unused, good-used, bad,
 spare.
\end_layout

\begin_layout Subsubsection
Layer 1: Integrity (optional)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
in a future version.
 This will require a new Devicemapper target be developed.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This layer uses a to-be-developed DM target that allows the detection of
 incorrect data as it is read, by using extra space to record the results
 of checksum/hash functions on the data blocks, and then compare the results
 with what the blockdev actually returned.
 This will enable Stratis to detect data corruption when the pool is non-redunda
nt, and to repair the corruption when the pool is redundant.
 Such a DM target could use DIF information if present.
\end_layout

\begin_layout Subsubsection
Layer 2: Redundancy (optional)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
in a future version
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A Stratis pool may optionally be configured to spread data across multiple
 physical disks, so that the loss of any one disk does not cause data loss.
 Stratis uses conventional RAID technology (1, 5, 6, 10) as specified, and
 converts Layer 0 blockdevs into a smaller-sized amount of storage with
 the specified raid properties.
\end_layout

\begin_layout Standard
Since Stratis supports more blockdevs than are RAID-able (generally 8 or
 fewer is best for a raidset
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
citation needed
\end_layout

\end_inset

), and differently-sized blockdevs, a redundant Stratis pool may contain
 multiple raid sets (all of the same global type).
 Depending on layout, there may be some amount of space in a pool’s blockdevs
 that cannot be used because it cannot be used in a RAID set.
 Stratis will intensively manage raidsets, extending them across newly added
 blockdevs or creating new raidsets; and handling the removal of blockdevs
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
in a future version
\end_layout

\end_inset

.
 Stratis may use dm-raid’s reshape capabilities when possible.
\end_layout

\begin_layout Standard
Stratis cannot support redundancy with a single disk, but we may wish to
 reserve the small space for raid metadata and other uses even on one-disk
 Stratis pools.
 This will allow the pool to be made redundant (in the version when we support
 this) without encountering ugly edge cases.
\end_layout

\begin_layout Subsubsection
Layer 3: Flexibility
\end_layout

\begin_layout Standard
Whether blockdevs are part of raidsets or used directly, pools need to cope
 with the addition or removal
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
in a future version
\end_layout

\end_inset

 of them.
\end_layout

\begin_layout Standard
Stratis must allow adding a blockdev to an existing pool, and use it to
 grow the pool's allocated space.
 (This may involve reshaping one or more raidsets to be wider, or just knowing
 to extend the thinpool onto the new blockdev when other blockdevs are full.)
\end_layout

\begin_layout Standard
In a future version, Stratis will assign states to each blockdev that reflect
 whether
\end_layout

\begin_layout Itemize
It can be removed from the pool with no effect
\end_layout

\begin_layout Itemize
Removed with loss of redundancy
\end_layout

\begin_layout Itemize
Not removed without data loss.
\end_layout

\begin_layout Standard
It should also move active data off a perhaps-failing disk (or refuse, if
 space on other disks in the pool is not sufficient) so that the disk then
 can be removed from the pool.
 blockdevs may also be marked as ‘spare’, so that they do not contribute
 to the total available space of the pool, but can immediately replace a
 failed disk.
\end_layout

\begin_layout Standard
The flexibility layer will support two linear DM devices made up of segments
 from lower-level devices, which will be used by Layer 4 (Thin Provisioning)
 as metadata and data devices.
 It will track what lower-level devices they are allocated from, allow the
 two devices to grow, and handle the online movement of segments in these
 devices when lower-level devices come and go.
\end_layout

\begin_layout Standard
Furthermore, the flexibility layer will support a third linear DM device
 called the Metadata Device that will be used to store metadata about upper
 layers.
\end_layout

\begin_layout Standard
All three devices in this layer may be built on L0, L1, or L2 devices, depending
 on configuration.
 The first two will share a configuration, but the Metadata Device may have
 a separate configuration (e.g.
 Metadata Device could be raid1, even as the other two are not).
\end_layout

\begin_layout Subsubsection
Layer 4: Thin Provisioning
\end_layout

\begin_layout Standard
The two linear targets from L3 are used as metadata device and data device
 for a DM thin pool.
 Stratis manages the thinpool device by extending the two L3 subdevices
 when either runs low on available blocks.
 If the pool approaches a point where the pool no longer has empty lower-level
 space to extend onto, Stratis alerts the user and does what it must to
 avoid data corruption.
\end_layout

\begin_layout Subsubsection
Layer 5: Thin Volumes
\end_layout

\begin_layout Standard
From the thin pool Stratis creates one or more thin volumes.
 It will automatically give a new volume a default size, and format it with
 a filesystem, and make it available to the user.
\end_layout

\begin_layout Standard
Stratis keeps snapshot origin info in its metadata for user informational
 purposes.
\end_layout

\begin_layout Subsubsection
Layer 6: Encryption (optional)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
in a future version
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Stratis could enable per-filesystem encryption between the thin device and
 the filesystem.
\end_layout

\begin_layout Subsubsection
Layer 7: Filesystem
\end_layout

\begin_layout Standard
Stratis monitors each filesystem’s fullness vs its capacity and automatically
 extends (using e.g.
 xfs_growfs) them without user intervention.
 Stratis also periodically will run fstrim to reclaim unused space.
\end_layout

\begin_layout Subsection
Data Tier Metadata
\end_layout

\begin_layout Standard
Stratis must track the blockdevs that make up the data tier of the pool
 (L0), integrity parameters (L1), the raidsets that are created from the
 data blockdevs (L2), the three linear targets that span the L2 devices
 (L3), the thinpool device (L4) and the attributes of the thin devices (L5)
 and filesystems created from the thinpool (L7).
\end_layout

\begin_layout Subsubsection
Requirements
\end_layout

\begin_layout Enumerate
Uniquely identify a blockdev as used by Stratis, which pool it is a member
 of, and parameters needed to recreate all layers
\end_layout

\begin_layout Enumerate
Detect incomplete or corrupted metadata and recover via second copy
\end_layout

\begin_layout Enumerate
Allow for blockdevs being expanded underneath Stratis
\end_layout

\begin_layout Enumerate
Redundant on each blockdev to tolerate unreadable sectors
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Recovery from accidental start-of-blockdev overwrite by placing a second
 copy at the end of the disk was also considered, but raised other issues
 that outweighed its benefit.
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Redundant across blockdevs to handle missing, damaged etc.
 members.
 Can provide number & characteristics of missing blockdevs
\end_layout

\begin_layout Enumerate
Handle thousand+ blockdevs in a pool
\end_layout

\begin_layout Enumerate
Handle million+ filesystems in a pool and updates without writing to each
 blockdev
\end_layout

\begin_layout Enumerate
Extensible/upgradeable metadata format
\end_layout

\begin_layout Subsubsection
Design Overview
\end_layout

\begin_layout Standard
Stratis metadata is in three places:
\end_layout

\begin_layout Enumerate
Blockdev Data Area (BDA)
\end_layout

\begin_deeper
\begin_layout Enumerate
Signature Block within Static Header
\end_layout

\begin_layout Enumerate
Metadata Area (MDA)
\end_layout

\end_deeper
\begin_layout Enumerate
Metadata Device (Flex Layer)
\end_layout

\begin_layout Standard
(Specific DM targets such as raid, integrity, and thinpool also place their
 own metadata on disk.)
\end_layout

\begin_layout Subsubsection
BlockDev Data Area (BDA)
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename stratis-bda.svg
	scale 50

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
BDA format
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The BDA consists of a fixed-length Static Header of sixteen sectors, which
 contains two copies of the Signature Block; and the metadata area (MDA),
 whose length is specified in the Signature Block.
 These are written to the beginning of the blockdev as described below.
\end_layout

\begin_layout Standard
Sectors are 512 bytes in length
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Historically this is the minimum storage unit of a hard drive.
 Many Linux kernel APIs assume this value is constant (as does this document),
 and use another term such as 'block size' for dealing with cases where
 the minimum storage unit is different.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Stratis reserves the first 16 sectors of each blockdev for the Static Header.
\end_layout

\begin_layout Standard

\emph on
Static Header
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sector offset
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
length (sectors)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
contents
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unused
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signature Block copy 1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unused
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signature Block copy 2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unused
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
Signature Block
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="60col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
byte offset
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
length (bytes)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IEEE CRC32 of signature block (bytes at offset 4 length 508)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stratis signature: '!Stra0tis
\backslash
x86
\backslash
xff
\backslash
x02^
\backslash
x41rh'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Device size in 512-byte sectors (u64)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
28
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
flags
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ASCII hex UUID for the Stratis pool
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ASCII hex UUID for the blockdev
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
96
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sector length of blockdev metadata area (MDA) (u32)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sector length of reserved space (u32)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
104
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
408
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unused
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
No flags are yet defined, so 'flags' field is zeroed.
\end_layout

\begin_layout Itemize
All 'unused' fields are zeroed, and are reserved for future use.
\end_layout

\begin_layout Itemize
Blockdev metadata area length (offset 96) must be a number divisible by
 four of at least 2032 – combined minimum length of overall BDA (static
 header and MDA) is 2048 sectors (1 MiB).
\end_layout

\begin_layout Itemize
The BDA is followed immediately by 
\emph on
reserved space
\emph default
, whose size is specified in the signature block (offset 100).
 Reserved space is used by Stratis for temporary storage.
\end_layout

\begin_layout Standard
The MDA is divided into four equal-size regions, numbered 0-3.
 When updating metadata, identical data is written to either the odd (1
 and 3) or even (0 and 2) regions, chosen by examining the timestamps and
 overwriting the older of two pairs.
\end_layout

\begin_layout Standard
Each MDA region's update consists of a fixed-length MDA Header, followed
 by variable-length JSON data.
\end_layout

\begin_layout Standard

\emph on
MDA Header
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="60col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
byte offset
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
length (bytes)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IEEE CRC32 covering remainder of MDA header plus JSON data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
length of JSON data in bytes (u32)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UNIX timestamp (seconds since Jan 1 1970) (u64)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nanoseconds (u32)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unused
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
variable
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JSON data
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Metadata updates write to the older of the odd or even MDA regions.
 This is determined by lowest timestamp, and then lowest nanoseconds if
 timestamps are equal.
\end_layout

\begin_layout Itemize
MDA updates include the MDA Header, which includes the current time.
 However, if using the current time would not result in the update having
 the latest time across all MDA regions on all blockdevs in the pool, instead
 use a time of one nanosecond later than the latest MDA region time across
 all blockdevs.
\end_layout

\begin_layout Itemize
The procedure for updating metadata is:
\end_layout

\begin_deeper
\begin_layout Enumerate
Determine which regions in the MDA to use (odd or even) as described above.
\end_layout

\begin_layout Enumerate
Write MDA header and JSON data to the first MDA region (0 or 1)
\end_layout

\begin_layout Enumerate
Perform a Flush/FUA
\end_layout

\begin_layout Enumerate
Write MDA header and JSON data to the second MDA region (2 or 3)
\end_layout

\begin_layout Enumerate
Perform a Flush/FUA
\end_layout

\begin_layout Enumerate
Repeat for additional blockdevs.
 Also see 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:The-MDA-and"

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Multiple blockdevs being updated with the same metadata must write identical
 data to each MDA region, but which regions (odd or even) is used may vary,
 if the blockdevs have received differing numbers of metadata updates over
 time.
\end_layout

\begin_layout Itemize
Software will generally read Signature Block copy 1 and MDA regions 0 and
 1, and only reference additional copies if the CRC check fails.
\end_layout

\begin_layout Subsubsection
Metadata Area (MDA)
\end_layout

\begin_layout Standard
The MDA contains a JSON object that represents the pool's overall configuration
 of blockdevs, from L0 to L4.
\end_layout

\begin_layout Standard
Top level objects:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="45col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
json type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the name of the Stratis pool
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
block_devs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the block devices in the pool (see below)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
integrity_devs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
info on integrity devices & layout (TBD)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
raid_devs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
layout of the raid devices (TBD)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
flex_devs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
layout of the data and metadata linear devices (see below)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
thinpool_dev
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
parameters of the thinpool device (see below)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

block_devs
\begin_inset Quotes erd
\end_inset

 is an object whose strings are 32-byte ASCII hex uuids and whose values
 are objects with the following strings:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="50col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
json type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dev
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the entry in /dev where this blockdev was last available
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
size
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the blockdev's size in sectors
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
location
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
user-provided information for tracking the device
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
disk_id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
uniquely identifying information for the block device, such as SCSI VPD83
 or serial number
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
integrity_devs: TBD
\end_layout

\begin_layout Standard
raid_devs: TBD
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

flex_devs
\begin_inset Quotes erd
\end_inset

 is an object that contains three strings: 
\begin_inset Quotes eld
\end_inset

meta_dev
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

thin_meta_dev
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

thin_data_dev
\begin_inset Quotes erd
\end_inset

.
 Each of these values are arrays of objects.
 These define the linear segments that make up each.
 Each segment object has the following strings:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="55col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
json type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
parent
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32 byte ASCII hex uuid of the lower-layered device the segment is in
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
start
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the starting sector offset within the parent device
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
length
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the length in sectors of the segment
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

parent
\begin_inset Quotes erd
\end_inset

 may be a valid blockdev, integrity dev, or raid dev uuid.
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

thinpool_dev
\begin_inset Quotes erd
\end_inset

 is an object with the following values:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="40col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
json type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
data_block_size
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the size in sectors of the thinpool data block size
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Metadata Device
\end_layout

\begin_layout Standard
The Metadata Device is formatted with an XFS filesystem that is used by
 Stratis to store information on user-created thin filesystems (L5-L7).
 This information is stored in the filesystem in a TBD format, maybe either
 an individual file-based scheme, or SQLite database.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:The-MDA-and"

\end_inset

The MDA and Very Large Pools
\end_layout

\begin_layout Standard
Stratis pools with very large numbers of blockdevs will encounter two issues.
 First, updating the metadata on all blockdevs in the pool may become a
 performance bottleneck.
 Second, the default MDA size may become inadequate to contain the information
 required.
\end_layout

\begin_layout Standard
To solve the first issue, Stratis caps the number of blockdevs that receive
 updated metadata information.
 A reasonable value for this cap might be in the range of 6 to 10, and should
 try to spread metadata updates across path-independent blockdevs, if this
 can be discerned, or randomly.
 This limits excessive I/O when blockdevs are added or removed from the
 pool, but maximizes the likelihood that up-to-date pool metadata is retrievable
 in case of failure.
\end_layout

\begin_layout Standard
To solve the second issue, Stratis monitors how large its most recent serialized
 metadata updates are, and increases the size of MDA areas on newly added
 devices when a fairly low threshold – %50 – is reached in comparison to
 the available MDA region size.
 This ensures that by the time sufficient blockdevs have been added to the
 pool to be in danger of serialized JSON data being too large, there are
 enough blockdevs with enlarged MDA space that they can be used for MDA
 writes.
\end_layout

\begin_layout Subsubsection
Metadata and Recovery
\end_layout

\begin_layout Standard
Bad things happen.
\end_layout

\begin_layout Standard
In order to recover from disk errors, Stratis uses CRCs over the critical
 L0-L4 metadata, and writes duplicate copies to a single blockdev, as well
 as across multiple blockdevs, when possible.
 It takes this approach – copies – rather than a mechanism that might make
 it possible to partially repair corrupted metadata for three reasons:
\end_layout

\begin_layout Enumerate
This metadata is relatively small – it concerns disks and raidsets, of which
 the pool will have only a small number, so having multiple entire copies
 isn't terribly wasteful.
\end_layout

\begin_layout Enumerate
Partially reconstructed information has limited value.
 This is due to the layered nature of Stratis.
 It's not sufficient to know some subset of the device mapping levels.
 Since they are layered, recovering e.g.
 L0-L2 layouts allows no data to be recovered without also knowing how L3
 and L4 are mapped on top, and vice versa.
\end_layout

\begin_layout Enumerate
L0-L4 metadata should require relatively few updates per day, since the
 changes it would reflect are blockdevs being added/removed from the pool,
 or thinpool data device expansions.
 Infrequent updates reduces the likelihood of corruption
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
citation needed?
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
L5-L7 is stored on the Metadata Device on an XFS filesystem, so partial
 data recovery of that information is possible.
\end_layout

\begin_layout Standard
In addition to Stratis-specific metadata, Devicemapper layers such as cache,
 raid, thin, as well as XFS filesystems, all have their own metadata.
 Stratis would rely on running each of their specific repair/fsck tools
 in case they reported errors.
\end_layout

\begin_layout Part
Development Plan
\end_layout

\begin_layout Section
Implementation Choices
\end_layout

\begin_layout Subsection
'stratis' command-line tool
\end_layout

\begin_layout Standard
Stratis' command-line tool is currently written in Python.
 Since this is only used after the system is booted by the adminstrator,
 Python's interpreted nature and overhead is not a concern.
\end_layout

\begin_layout Subsection
stratisd
\end_layout

\begin_layout Standard
Stratisd needs to be implemented in a compiled language, in order to meet
 the requirement that it operate in a preboot environment.
 A small runtime memory footprint is also important.
\end_layout

\begin_layout Standard
stratisd is written in 
\begin_inset CommandInset href
LatexCommand href
name "Rust"
target "https://www.rust-lang.org/en-US/"

\end_inset

.
 The key features of Rust that make it a good choice for stratisd are:
\end_layout

\begin_layout Itemize
Compiled with minimal runtime (no GC)
\end_layout

\begin_layout Itemize
Memory safety, speed, and concurrency
\end_layout

\begin_layout Itemize
Strong stdlib, including collections
\end_layout

\begin_layout Itemize
Error handling
\end_layout

\begin_layout Itemize
Libraries available for DBus, Devicemapper, JSON serialization, and CRC
\end_layout

\begin_layout Itemize
FFI to C libs if needed
\end_layout

\begin_layout Itemize
Will be available on RHEL 7 in delivery timeframe; currently packaged in
 Fedora
\end_layout

\begin_layout Standard
Other alternatives considered were C and C++.
 Rust was preferred over them for increased memory safety and productivity
 reasons.
\end_layout

\begin_layout Section
Delivery of Features
\end_layout

\begin_layout Subsection
Stratis version 0.1
\end_layout

\begin_layout Standard
Simplest thing that does something useful
\end_layout

\begin_layout Enumerate
Create a pool
\end_layout

\begin_layout Enumerate
Destroy a pool
\end_layout

\begin_layout Enumerate
Create a filesystem
\end_layout

\begin_layout Enumerate
Create a filesystem from existing filesystem (a r/w snapshot)
\end_layout

\begin_layout Enumerate
Destroy a filesystem
\end_layout

\begin_layout Enumerate
List filesystems
\end_layout

\begin_layout Enumerate
Rename filesystems
\end_layout

\begin_layout Enumerate
List pools
\end_layout

\begin_layout Enumerate
Rename pools
\end_layout

\begin_layout Enumerate
List blockdevs in a pool
\end_layout

\begin_layout Enumerate
Redundancy level: none
\end_layout

\begin_layout Enumerate
D-Bus API
\end_layout

\begin_layout Enumerate
Command-line tool
\end_layout

\begin_layout Enumerate
Save/restore configuration across reboot
\end_layout

\begin_layout Enumerate
Initial disk labeling and on-disk metadata format
\end_layout

\begin_layout Enumerate
Error handling for missing, corrupted, or duplicate blockdevs in a pool
\end_layout

\begin_layout Subsection
Stratis version 0.5
\end_layout

\begin_layout Standard
Add cache tier
\end_layout

\begin_layout Enumerate
List cache blockdevs in a pool
\end_layout

\begin_layout Enumerate
Add cache blockdevs
\end_layout

\begin_layout Enumerate
Remove cache blockdevs
\end_layout

\begin_layout Enumerate
Write-through caching only
\end_layout

\begin_layout Subsection
Stratis version 1.0
\end_layout

\begin_layout Standard
Minimum Viable Product
\end_layout

\begin_layout Enumerate
Snapshot management: auto snaps, date-based culling, “promotion” from snap
 to “primary”
\end_layout

\begin_layout Enumerate
Monitor pool(s) for getting close to capacity, and do something (remount
 ro?) if dangerously full
\end_layout

\begin_layout Enumerate
Notification method to the user if pool is approaching user or system-defined
 capacity
\end_layout

\begin_layout Enumerate
Maintain filesystems: Grow a filesystem as it nears capacity
\end_layout

\begin_layout Enumerate
Maintain filesystems: Run fstrim periodically to release unused areas back
 to thinpool
\end_layout

\begin_layout Enumerate
Add and use an additional blockdev
\end_layout

\begin_layout Subsection
Stratis version 2.0
\end_layout

\begin_layout Standard
Add Redundancy Support
\end_layout

\begin_layout Enumerate
Remove an existing blockdev
\end_layout

\begin_layout Enumerate
Redundancy level: raid1
\end_layout

\begin_layout Enumerate
Redundancy level: raid5
\end_layout

\begin_layout Enumerate
Redundancy level: raid6
\end_layout

\begin_layout Enumerate
Redundancy level: raid10
\end_layout

\begin_layout Enumerate
Cache redundancy level: raid1
\end_layout

\begin_layout Enumerate
Write-through caching enabled
\end_layout

\begin_layout Enumerate
thin/cache metadata validation/check (i.e.
 call thin_check & cache_check)
\end_layout

\begin_layout Enumerate
Quotas
\end_layout

\begin_layout Enumerate
Blockdev resize (larger)
\end_layout

\begin_layout Enumerate
Spares
\end_layout

\begin_layout Subsection
Stratis version 3.0
\end_layout

\begin_layout Standard
Rough ZFS feature parity.
 New DM features needed.
\end_layout

\begin_layout Enumerate
Send/Receive
\end_layout

\begin_layout Enumerate
Integrity checking (w/ self-healing only if on raid)
\end_layout

\begin_layout Enumerate
Raid scrub
\end_layout

\begin_layout Enumerate
Compression
\end_layout

\begin_layout Enumerate
Encryption
\end_layout

\begin_layout Enumerate
Dedupe
\end_layout

\begin_layout Enumerate
Raid write log (on ssd? To eliminate raid write hole)
\end_layout

\begin_layout Subsection
Stratis version 4.0
\end_layout

\begin_layout Standard
Future features and evolution
\end_layout

\begin_layout Enumerate
Change a pool’s redundancy level
\end_layout

\begin_layout Enumerate
Boot from a filesystem
\end_layout

\begin_layout Enumerate
Libstoragemgmt integration
\end_layout

\begin_layout Enumerate
Multipath integration
\end_layout

\begin_layout Enumerate
Tag-based blockdev and filesystem classification/grouping
\end_layout

\begin_layout Enumerate
Mirroring across partitions within a pool, for multi-site or across hw failure
 domains (shelves/racks)
\end_layout

\begin_layout Section
Schedule
\end_layout

\begin_layout Standard
Very tentative.
 Shooting for 0.1 by end of January 2017, 0.5 1H 2017, 1.0 by end of 2017.
\end_layout

\begin_layout Section
Open Questions
\end_layout

\begin_layout Paragraph
Initial filesystem sizing.
\end_layout

\begin_layout Standard
Mkfs does different things depending on the size of the blockdev.
 If it’s small then things will be suboptimal if we grow it substantially.
 Weigh this against too large, which would waste thinpool space (mkfs touches/al
locates more thin blocks).
\end_layout

\begin_layout Paragraph
Alignment and tuning of sizes across layers.
\end_layout

\begin_layout Standard
It would be great if the fs happens to write to a new location that allocates
 a thin block that it uses that entire block.
 Also, look at XFS allocation groups, they may work cross-purposes to thinpool
 by spreading files across the blkdev.
 Align as much as possible.
\end_layout

\begin_layout Paragraph
Behavior when thin pool is exhausted.
\end_layout

\begin_layout Standard
Slow down? Switch all fs to read-only?
\end_layout

\begin_layout Paragraph
Should we separate cache into read devs and write devs?
\end_layout

\begin_layout Standard
Write-back cache we may want to support redundancy (cache contains only
 copy of data until flush) whereas read cache redundancy serves little purpose,
 just reduces the total space available.
\end_layout

\begin_layout Paragraph
Being able to identify and differentiate blockdevs within a pool is very
 important, given how many there can be.
\end_layout

\begin_layout Standard
We should provide the user with system-generated info, and also allow the
 user to add their own descriptions of blockdevs.
\end_layout

\begin_layout Paragraph
Journald interactions
\end_layout

\begin_layout Paragraph
Nfs interactions
\end_layout

\end_body
\end_document
